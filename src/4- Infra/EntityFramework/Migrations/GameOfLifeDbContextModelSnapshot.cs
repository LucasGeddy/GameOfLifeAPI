// <auto-generated />
using GameOfLife.Infra.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameOfLife.Migrations
{
    [DbContext(typeof(GameOfLifeDbContext))]
    partial class GameOfLifeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameOfLife.Domain.Entities.Board", b =>
                {
                    b.Property<int>("BoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BoardId"));

                    b.Property<bool>("GameOver")
                        .HasColumnType("bit");

                    b.Property<int>("Generation")
                        .HasColumnType("int");

                    b.HasKey("BoardId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("GameOfLife.Domain.Entities.Cell", b =>
                {
                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<int>("PositionX")
                        .HasColumnType("int");

                    b.Property<int>("PositionY")
                        .HasColumnType("int");

                    b.HasKey("BoardId", "PositionX", "PositionY");

                    b.ToTable("Cells");
                });

            modelBuilder.Entity("GameOfLife.Domain.Entities.Cell", b =>
                {
                    b.HasOne("GameOfLife.Domain.Entities.Board", null)
                        .WithMany("LivingCells")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameOfLife.Domain.Entities.Board", b =>
                {
                    b.Navigation("LivingCells");
                });
#pragma warning restore 612, 618
        }
    }
}
